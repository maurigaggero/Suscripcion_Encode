@page "/Registrar-Suscripcion"

@using Suscripcion_Encode.Shared
@inject NavigationManager NavigationManager
@inject HttpClient Http
@using System.Text.Json

@inject IJSRuntime JS

<h3>Registrar Suscripción</h3>

<div class="d-flex position-sticky">
    <div class="input-group">
        <select @bind="tipo" placeholder="Tipo documento" class="form-control">
            @foreach (string item in Enum.GetNames(typeof(Suscriptor.TiposDocumento)))
            {
                <option value="@item"> @item</option>
            }
        </select>
        <input @bind="@numero" placeholder="N° Documento" class="form-control" />
        <div class="input-group-append">
            <button @onclick="Solicitud" class="btn btn-primary" type="button">Buscar</button>
        </div>
    </div>
</div>

<hr />

@if (ocultar == false)
{
    <div class="mb-2">
        <b>
            El suscriptor se ha encontrado pero no posee suscripción,
            presione "Confirmar nueva suscripción" para crearla
        </b>
    </div>

    <table class="table table-hover">
        <thead class="thead-dark">
            <tr>
                <th></th>
                <th>Nombre y Apellido</th>
                <th>Documento</th>
                <th>Dirección</th>
                <th>Teléfono</th>
                <th>E-mail</th>
                <th>Usuario</th>
                <th>Contraseña</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td><a href="Modificar-Suscriptor/@suscriptor.IdSuscriptor" class="btn btn-sm btn-warning">Modificar</a></td>
                <td>@suscriptor.Nombre @suscriptor.Apellido</td>
                <td>@suscriptor.TipoDocumento: @suscriptor.NumeroDocumento</td>
                <td>@suscriptor.Direccion</td>
                <td>@suscriptor.Telefono</td>
                <td>@suscriptor.Email</td>
                <td>@suscriptor.NombreUsuario</td>
                <td>@suscriptor.Password</td>
            </tr>
        </tbody>
    </table>

    <footer class="d-flex justify-content-center">
        <button @onclick="@(() => NuevaSuscripcion(suscriptor))" class="btn btn-block btn-success">Confirmar nueva suscripción</button>
    </footer>
}

@code {
    private Suscriptor.TiposDocumento tipo = 0; //tipo documento

    private string numero = string.Empty; //numero documento

    private bool ocultar = true;

    Suscripcion suscripcion = new Suscripcion();

    Suscripcion suscripciontemp = new Suscripcion();

    Suscriptor suscriptor = new Suscriptor();

    async Task Solicitud()
    {
        if (tipo != 0 && numero != string.Empty)
        {
            var existe_suscriptor = await Http.GetAsync($"api/suscriptores/existe/{tipo}/{numero}");
            var existe_suscripcion = await Http.GetAsync($"api/suscripciones/existe/{tipo}/{numero}");

            if (existe_suscriptor.IsSuccessStatusCode && !existe_suscripcion.IsSuccessStatusCode)
            {
                var respuestastring = await existe_suscriptor.Content.ReadAsStringAsync();

                suscriptor = JsonSerializer.Deserialize<Suscriptor>(respuestastring,
                new JsonSerializerOptions() { PropertyNameCaseInsensitive = true });

                ocultar = false;
            }
            else if (existe_suscriptor.IsSuccessStatusCode && existe_suscripcion.IsSuccessStatusCode)
            {
                var respuestastring = await existe_suscripcion.Content.ReadAsStringAsync();

                suscripciontemp = JsonSerializer.Deserialize<Suscripcion>(respuestastring,
                new JsonSerializerOptions() { PropertyNameCaseInsensitive = true });

                await JS.InvokeVoidAsync("simple", "Aviso",
                    $"Este suscriptor ya posee suscripción activa. " +
                    $"Creada el: {suscripciontemp.FechaAlta}", "warning");

                ocultar = true;
            }
            else
            {
                ocultar = true;

                var confirmacion = await JS.InvokeAsync<bool>("confirmar", "¿Desea crear suscriptor?",
                $"No existe suscriptor con {tipo}:{numero}", "question");
                if (confirmacion)
                {
                    NavigationManager.NavigateTo("/Registrar-Suscriptor");
                }
            }
        }
        else
        {
            ocultar = true;

            await JS.InvokeVoidAsync("simple", "Error", "Especifique número y tipo de documento.", "error");
        }
    }


    async Task NuevaSuscripcion(Suscriptor suscriptor)
    {
        var confirmacion = await JS.InvokeAsync<bool>
    ("confirmar", "Confirmar",
    $"¿Desea crear nueva suscripción con fecha: {DateTime.Now}?", "question");
        if (confirmacion)
        {
            suscripcion.IdSuscriptor = suscriptor.IdSuscriptor;
            var respuesta = await Http.PostAsJsonAsync($"api/suscripciones", suscripcion);
            if (respuesta.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("simple", "¡Éxito!", "¡Suscripción creada!", "success");
                NavigationManager.NavigateTo("/");
            }
            else
            {
                await JS.InvokeVoidAsync("simple", "Error", "No se pudo crear suscripción", "error");
            }
        }
    }
}
